---
description: General guidelines, and Goal management
globs:
alwaysApply: true
---

# Instructions

## General Information

This python (3.13) repo uses the astral.sh stack along other CLIs:
1. `devcontainer` - environment isolation
2. `just` - common commands management
3. `pre-commit` - triggers all of the following CLIs
4. `uv` - venv and CLIs management
5. `ruff` - format and lint
6. `ty` - type checking
7. `pytest` - testing
8. `tox` - tests automation
9. `typos` - spell checking
10. `commitlint` - conventional commits adherence
11. `pip-audit` - dependency security
12. `trivy` - general security
13. `claude` - for an objective AI review
14. `lintok` - file size linter
15. `ties` - file-to-file sync with transformations
16. `yamlfmt` - yaml format and lint
17. `biomejs` - json format and lint
18. `rumdl` - markdown format and lint
19. `lychee` - broken link detection
20. `taplo` - general toml format and lint
21. `pyproject-fmt` - pyproject.toml format and lint
22. `tox-toml-fmt` - tox.toml format and lint

## Git

Commit messages must follow the conventional commits standard like so:  

```text
`<type>`(`<scope>`): `<up-to-60-characters>`  
`<optional-details>`  
Assisted-by: `<name-of-code-assistant>`  
```

## Just Pre-Commit

`just pre-commit` is configured to run all CLIs.  
To run, simply:

```shell
just p
```

With no additional options.  
Before editing anything, **ALWAYS** start with `just p`.  
**NEVER** run a CLI directly before `just p` first.  
Running a CLI directly is a last resort.  

## Code

Any code or file significantly generated or edited by you
must have at least one inline/header comment:  

```text
Generated by `<name-of-code-assistant>`
```

or  

```text
Edited by `<name-of-code-assistant>`  
```

## Edit Attempts

Each sequence of edits and code generation without
`just p` is an Edit Attempt.  
Edit Attempts should be atomic, focused and encapsulated.  

Before any Edit Attempt:
- a descriptive line:

  ```text
  `[EDIT]` `<goal>`, `<task>`, attempt #`<index>`: `STARTING`  
  ```

After any Edit Attempt:  
- `just p` (to `git add .` & `pre-commit` in a single command)
- a summary line:

  ```text
  `[EDIT]` `<goal>`, `<task>`, attempt #`<index>`: `<status>`  
  ```

  where `<status>` is `SUCCESS` or `FAILED`

## Tasks

Each Task is a sequence of Edit Attempts.  
A Task with a single `SUCCESS` is considered `DONE`.  
When a Task is `DONE`, move on to the next Task.  
After 3 `FAILED` Edit Attempts, the Task is considered `STUCK`.  

Before any Task:  
- a descriptive line:

  ```text
  `[TASK]` `<goal>`, `<task>`: `STARTING`  
  ```

After any Task:  
- `git commit` your changes
- a summary line:

  ```text
  `[TASK]` `<goal>`, `<task>`: `<status>` after `<amount>` attempts  
  ```

  where `<status>` is `DONE` or `STUCK`

- `CHANGELOG.md` update if needed

## Goals

A Goal is a testable valuable feature that is achievable
through a sequence of Tasks.  
Tasks must include testing the feature.  
Tasks may be changed, `CANCELED` or added when needed.  
When all Tasks are `DONE` the Goal is `COMPLETED`.  
You should address the user only if:
1. A Goal was `COMPLETED`
2. You are `STUCK`

Before any Goal:
- a descriptive line:

  ```text
  `[GOAL]` `<goal>`: `STARTING`  
  ```

After any `COMPLETED` Goal:
- `git push` your changes
- a summary paragraph:

  ```text
  `[GOAL]` `<goal>`: `COMPLETED`  
  `<done-amount>` Tasks `DONE`  
  `<canceled-amount>` Tasks `CANCELED`  
  `<stuck-amount>` times `STUCK`  
  `<concise-summary-of-the-process>`  
  ```

- add your summary paragraph to the `./agent-log/` folder as a new file called:

  `<date-time:YYYYMMDD-hhmmss>-<name-of-code-assistant>-<goal>.md`
